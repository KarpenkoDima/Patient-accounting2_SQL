SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/* [DispensaryMainTest].[dbo].[uspSaveAddress] */

/* DispensaryMain.[dbo].[uspSaveAddress] */

CREATE PROCEDURE [dbo].[uspSaveAddress]
/***********************************************************
* Code generated by SoftTree SQL Assistant © v7.4.435
*
* Procedure description: This procedure is used for adding 
*                        and updating records in table 
*                        Address
* Date:   13.12.2015 
* Author: DIMA
*
* Changes
* Date        Modified By            Comments
************************************************************
* 13.12.2015  DIMA     Initial version
************************************************************/
(
    @AddressID int = NULL OUT,
    @CustomerID int = NULL,
    @Region nchar(50) = NULL,
    @Contry nchar(50) = NULL,
    @City nvarchar(100) = NULL,
    @AdminDivisionID int = NULL,
    @TypeStreetID int = NULL,
    @NameStreet nvarchar(100) = NULL,
    @NumberHouse nvarchar(5) = NULL,
    @NumberApartment nvarchar(5) = NULL,
    @ModifiedDate datetime = NULL
)
AS
BEGIN
    SET NOCOUNT ON
    DECLARE @rowcount INT, @error INT, @id INT

    -- start transaction
	BEGIN TRANSACTION

    -- check if the specified record already exists, if yes, update it, if no, create it
    IF NOT EXISTS 
    (    
         SELECT * 
         FROM [dbo].[Address]
         WHERE  AddressID = @AddressID
    )
    BEGIN 
    	IF NOT EXISTS (
    		SELECT *
    		FROM Customer AS c
    		WHERE c.CustomerID = @CustomerID
    	)
    	BEGIN
    		ROLLBACK TRANSACTION
    		RAISERROR ('Кретическая ошибка - нет пациента с таким ID.', 16, 1)
    		RETURN 1
    	END
    	SET @ModifiedDate = GETDATE()
         -- insert new record
         INSERT INTO [dbo].[Address]
         (
             CustomerID,
             Region,
             Country,
             City,
             AdminDivisionID,
             TypeStreetID,
             NameStreet,
             NumberHouse,
             NumberApartment,
             ModifiedDate
         )
         VALUES 
         (
             @CustomerID,
             @Region,
             @Contry,
             @City,
             @AdminDivisionID,
             @TypeStreetID,
             @NameStreet,
             @NumberHouse,
             @NumberApartment,
             @ModifiedDate
         )
    END 
    ELSE
    BEGIN
    	IF	@ModifiedDate IS NULL
    		BEGIN
    			SET @ModifiedDate = GETDATE()
    		END
         -- update existing record
         UPDATE [dbo].[Address]
         SET CustomerID = @CustomerID,
             Region = @Region,
             Country = @Contry,
             City = @City,
             AdminDivisionID = @AdminDivisionID,
             TypeStreetID = @TypeStreetID,
             NameStreet = @NameStreet,
             NumberHouse = @NumberHouse,
             NumberApartment = @NumberApartment,
             ModifiedDate = @ModifiedDate
         WHERE  AddressID = @AddressID AND CustomerID = @CustomerID
    END

    -- capture operation completion code and number of records affected
    --SELECT ERROR_MESSAGE() AS erro_my_, ERROR_LINE(), ERROR_NUMBER(), ERROR_SEVERITY()
	SELECT @rowcount = @@ROWCOUNT, 
           @error = @@ERROR,
           @id = SCOPE_IDENTITY()

	IF @error != 0
    BEGIN
        -- cancel transaction, undo changes
        ROLLBACK TRANSACTION
		
		
		-- report error and exit with non-zero exit code
        RAISERROR('Unable to update or insert new record. See previous message for details.', 16, 1) 
		RETURN @error
    END
    IF @rowcount != 1 
    BEGIN
        -- cancel transaction, undo changes
        ROLLBACK TRANSACTION

		-- report error and exit with non-zero exit code
        RAISERROR('Critical error. More than 1 record found for the specified criteria, just 1 is expected.', 16, 1) 
		RETURN 1
    END 

    -- commit changes and return 0 code indicating successful completion
    COMMIT TRANSACTION

	-- if operation type 'Add record', return result set with the last inserted column value 
    IF @id IS NOT NULL
        SELECT @AddressID= @id;-- AS NewRecordID
    ELSE SELECT @AddressID;-- AS RecordID
    RETURN 0
END

GO

GRANT EXECUTE ON [dbo].[uspSaveAddress] TO [Sensitive_medium] AS [dbo]
GO
