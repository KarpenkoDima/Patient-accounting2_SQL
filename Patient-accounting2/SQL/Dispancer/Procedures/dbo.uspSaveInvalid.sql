SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/* [DispensaryMainTest].[dbo].[uspSaveInvalid] */

/* DispensaryMain.[dbo].[uspSaveInvalid] */

CREATE PROCEDURE [dbo].[uspSaveInvalid]
/***********************************************************
* Code generated by SoftTree SQL Assistant © v7.4.435
*
* Procedure description: This procedure is used for adding 
*                        and updating records in table 
*                        Invalid
* Date:   13.12.2015 
* Author: DIMA
*
* Changes
* Date        Modified By            Comments
************************************************************
* 13.12.2015  DIMA     Initial version
************************************************************/
(
    @InvalidID int = NULL OUT,
    @DisabilityGroupID INT = NULL,
    @DataInvalidity datetime = NULL,
    @PeriodInvalidity datetime = NULL,
   -- @Dynamic varchar(50) = NULL,
    @ChiperReceptID INT = NULL,
    @Incapable bit = NULL,
    @DateIncapable datetime = NULL,
    --@Trustee nvarchar(200) = NULL,
    @CustomerID int = NULL,
    @ModifiedDate datetime = NULL
)
AS
BEGIN
    SET NOCOUNT ON
    DECLARE @rowcount INT, @error INT, @id INT

    -- start transaction
	BEGIN TRANSACTION

	IF @ChiperReceptID IS NOT NULL AND NOT EXISTS (
		SELECT * FROM ChiperRecept AS cr
		WHERE cr.ChiperReceptID = @ChiperReceptID
	)
	BEGIN
		ROLLBACK TRANSACTION
    		RAISERROR ('Кретическая ошибка - нет такого шифра льготного рецепта.', 16, 1)
    		RETURN 1
	END
	IF @DisabilityGroupID IS NOT NULL AND NOT EXISTS (
		SELECT * FROM DisabilityGroup AS dg
		WHERE dg.DisabilityGroupID = @DisabilityGroupID
	)
	BEGIN
		ROLLBACK TRANSACTION
    		RAISERROR ('Кретическая ошибка - нет такой группы инвалидности в справочнике.', 16, 1)
    		RETURN 1
	END
    -- check if the specified record already exists, if yes, update it, if no, create it
    IF NOT EXISTS 
    (    
         SELECT * 
         FROM [dbo].[Invalid]
         WHERE  InvalidID = @InvalidID
    )
    BEGIN 
    	IF NOT EXISTS (
    		SELECT *
    		FROM Customer AS c
    		WHERE c.CustomerID = @CustomerID
    	)
    	BEGIN
    		ROLLBACK TRANSACTION
    		RAISERROR ('Кретическая ошибка - нет пациента с таким ID.', 16, 1)
    		RETURN 1
    	END
         -- insert new record
         SET @ModifiedDate = GETDATE();
         INSERT INTO [dbo].[Invalid]
         (
            [DisabilityGroupID]
           ,[DataInvalidity]
           ,[PeriodInvalidity]
           ,[ChiperReceptID]
           ,[Incapable]
           ,[DateIncapable]
           ,[CustomerID]
           ,[ModifiedDate]
         )
         VALUES 
         (
             @DisabilityGroupID,
             @DataInvalidity,
             @PeriodInvalidity,
             --@Dynamic,
             @ChiperReceptID,
             @Incapable,
             @DateIncapable,
             --@Trustee,
             @CustomerID,
             @ModifiedDate
         )
    END 
    ELSE
    BEGIN
         -- update existing record
         UPDATE [dbo].[Invalid]
         SET DisabilityGroupID = @DisabilityGroupID,
             DataInvalidity = @DataInvalidity,
             PeriodInvalidity = @PeriodInvalidity,
             --[Dynamic] = @Dynamic,
             ChiperReceptID = @ChiperReceptID,
             Incapable = @Incapable,
             DateIncapable = @DateIncapable,
             --Trustee = @Trustee,
             --CustomerID = @CustomerID,
             ModifiedDate = GETDATE()
         WHERE  InvalidID = @InvalidID AND CustomerID = @CustomerID
    END

    -- capture operation completion code and number of records affected
	SELECT @rowcount = @@ROWCOUNT, 
           @error = @@ERROR,
           @id = SCOPE_IDENTITY()

	IF @error != 0
    BEGIN
        -- cancel transaction, undo changes
        ROLLBACK TRANSACTION

		-- report error and exit with non-zero exit code
        RAISERROR('Unable to update or insert new record. See previous message for details.', 16, 1) 
		RETURN @error
    END
    IF @rowcount != 1 
    BEGIN
        -- cancel transaction, undo changes
        ROLLBACK TRANSACTION

		-- report error and exit with non-zero exit code
        RAISERROR('Critical error. More than 1 record found for the specified criteria, just 1 is expected.', 16, 1) 
		RETURN 1
    END 

    -- commit changes and return 0 code indicating successful completion
    COMMIT TRANSACTION

	-- if operation type 'Add record', return result set with the last inserted column value 
    IF @id IS NOT NULL
        SELECT @InvalidID = @id-- AS NewRecordID
    ELSE SELECT @InvalidID 
    RETURN 0
END

GO
